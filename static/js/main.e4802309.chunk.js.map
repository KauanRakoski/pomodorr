{"version":3,"sources":["components/breakInt.js","components/sessionLen.js","components/timer.js","components/App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","className","onClick","breakInt","decreaseBreak","increaseBreak","SLen","SessionLen","decreaseSession","increaseSession","Timer","state","isSession","timerSecond","intervalId","play","bind","stop","decreaseTimer","refresh","clearInterval","this","setInterval","setState","resetMins","timerMinute","onToggleI","updateMin","prevState","React","Component","App","sessionLen","onIncreaseBreak","onDecreaseBreak","onIncreaseSession","onDecreaseSession","onUpdateTimerMin","onToggleInterval","onResetTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4802309.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction BreakInterval(props){\r\n    function decreaseBreak(){\r\n        if(props.breakInt <= 1) return;\r\n        props.decreaseBreak()\r\n    }\r\n    function increaseBreak(){\r\n        if(props.breakInt >= 60) return;\r\n        props.increaseBreak()\r\n    }\r\n\r\n    return (\r\n        <section className=\"mother\">\r\n            <h4>Break Lenght</h4>\r\n        \r\n            <section className=\"break-interval\">\r\n                <button onClick={decreaseBreak}>DOWN</button>\r\n                <p>{props.breakInt}</p>\r\n                <button onClick={increaseBreak}>UP</button>\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default BreakInterval;","import React from 'react';\r\n\r\nfunction SLen(props){\r\n\r\n    function decreaseSession(){\r\n        if(props.SessionLen <= 1) return;\r\n        props.decreaseSession()\r\n    }\r\n    function increaseSession(){\r\n        if(props.SessionLen >= 60) return;\r\n        props.increaseSession()\r\n    }\r\n\r\n    return(\r\n        <section className=\"mother\">\r\n            <h4>Session Length</h4>\r\n            <section className=\"slen\">\r\n                <button onClick={decreaseSession}>DOWN</button>\r\n                <p>{props.SessionLen}</p>\r\n                <button onClick={increaseSession}>UP</button>\r\n            </section>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default SLen;","import React from 'react';\r\n\r\nclass Timer extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            isSession: true,\r\n            timerSecond: 0,\r\n            intervalId: 0\r\n        }\r\n\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.decreaseTimer = this.decreaseTimer.bind(this)\r\n        this.refresh = this.refresh.bind(this);\r\n    }\r\n\r\n    stop(){\r\n        clearInterval(this.state.intervalId)\r\n    }\r\n\r\n    play(){\r\n        let intervalId = setInterval(this.decreaseTimer, 1000)\r\n\r\n        this.setState({\r\n            intervalId: intervalId\r\n        })\r\n    }\r\n\r\n    refresh(){\r\n        this.stop();\r\n        this.setState({\r\n            timerSecond: 0,\r\n        })\r\n        this.props.resetMins()\r\n    }\r\n\r\n    decreaseTimer(){\r\n        switch(this.state.timerSecond){\r\n            case 0:\r\n                if(this.props.timerMinute === 0){\r\n                    \r\n                    if(this.state.isSession){\r\n                        this.setState({\r\n                            isSession: false\r\n                        })\r\n                        this.props.onToggleI(this.state.isSession)  \r\n                    }else{\r\n                        this.setState({\r\n                            isSession: true\r\n                        })\r\n                        this.props.onToggleI(this.state.isSession)\r\n                    }\r\n                      \r\n                }\r\n\r\n                this.props.updateMin()\r\n                this.setState({timerSecond:59})\r\n                break;\r\n            default:\r\n                this.setState(prevState =>{\r\n                    return {\r\n                        timerSecond: prevState.timerSecond -1}\r\n                    })\r\n                break;\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <section>\r\n                <section className=\"timer-section\">\r\n                    <h4>{this.state.isSession === true ? \"Session\" : \"Break\"}</h4>\r\n                    <span>{this.props.timerMinute}</span>\r\n                    <span>:</span>\r\n                    <span>\r\n                        {this.state.timerSecond === 0 ? \"00\": this.state.timerSecond < 10 ? \"0\" + this.state.timerSecond : this.state.timerSecond}\r\n                    </span>\r\n                </section>\r\n                <button onClick={this.play}>Play</button>\r\n                <button onClick={this.stop}>Pause</button>\r\n                <button onClick={this.refresh}>Refresh</button>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\nimport '../App.css';\nimport BreakInterval from './breakInt'\nimport SLen from './sessionLen'\nimport Timer from './timer.js'\nimport { render } from 'react-dom';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n\n    this.state = {\n      breakInt: 5,\n      sessionLen: 25,\n      timerMinute: 25\n    };\n\n    this.onIncreaseBreak = this.onIncreaseBreak.bind(this);\n    this.onDecreaseBreak = this.onDecreaseBreak.bind(this);\n\n    this.onIncreaseSession = this.onIncreaseSession.bind(this);\n    this.onDecreaseSession = this.onDecreaseSession.bind(this);\n\n    this.onUpdateTimerMin = this.onUpdateTimerMin.bind(this);\n    this.onToggleInterval = this.onToggleInterval.bind(this);\n\n    this.onResetTimer = this.onResetTimer.bind(this);\n  }\n\n  onIncreaseBreak(){\n    this.setState((prevState) => {\n      return{\n        breakInt: prevState.breakInt + 1\n      }  \n    })\n  }\n\n  onDecreaseBreak(){\n    this.setState((prevState) => {\n      return{\n        breakInt: prevState.breakInt - 1,\n        \n      }  \n    })\n  }\n\n\n\n  onIncreaseSession(){\n    this.setState((prevState) => {\n      return{\n        sessionLen: prevState.sessionLen + 1,\n        timerMinute: prevState.sessionLen + 1,\n      }  \n    })\n  }\n\n  onDecreaseSession(){\n    this.setState((prevState) => {\n      return{\n        sessionLen: prevState.sessionLen - 1,\n        timerMinute: prevState.sessionLen - 1,\n      };  \n    });\n  };\n\n\n\n  onUpdateTimerMin(){\n    this.setState((prevState) => {\n      return {\n        timerMinute: prevState.timerMinute - 1\n      }\n    })\n  }\n\n  onToggleInterval(isSession){\n    if(isSession){\n      this.setState({\n        timerMinute: this.state.sessionLen\n      })\n    }else{\n      this.setState({\n        timerMinute: this.state.breakInt\n      })\n    } \n  }\n\n  onResetTimer(){\n    this.setState({\n      timerMinute: 25\n    })\n  }\n\n  render(){\n\n    return (\n      <main>\n        <h2>Pomodoro Clock</h2>\n        <section className=\"setters\">\n\n          < BreakInterval\n          breakInt={this.state.breakInt} \n          increaseBreak={this.onIncreaseBreak}\n          decreaseBreak={this.onDecreaseBreak}\n          \n          />\n\n          < SLen \n          SessionLen={this.state.sessionLen}\n          increaseSession = {this.onIncreaseSession}\n          decreaseSession = {this.onDecreaseSession}\n          />\n        </section>\n\n        < Timer \n        timerMinute = {this.state.timerMinute}\n        breakInt = {this.state.breakInt}\n        updateMin = {this.onUpdateTimerMin}\n        onToggleI = {this.onToggleInterval}\n        resetMins = {this.onResetTimer}\n        />\n      </main>\n    );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}